pipeline {
    agent any
    environment{
        SONAR_HOME =tool "Sonar"
    }
    stages {
        stage("Code") {
            steps {
                git url: 'https://github.com/shubham200264/node-todo-cicd.git', branch: 'master'
                echo 'Code cloned'
            }
        }
        stage("SonarQube Analysis"){
            steps{
                withSonarQubeEnv("Sonar"){
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=notetodo -Dsonar.projectkey=notetodo-X"
                }
            }
        }
        stage("Sonarqube Quality Gates"){
            steps{
                timeout(time: 1, unit: "MINUTES"){
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage("OWASp check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./',odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Build & Test") {
            steps {
                sh 'docker build -t node-app-batch-6:latest .'
                echo 'Image built'
            }
        }
        
        
        stage("Image Scanning through Trivy"){
            steps{
                sh "trivy image node-app-batch-6"
            }
        }
        stage("Push to Docker Hub") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DockerHubCred',
                    passwordVariable: 'dockerpass',
                    usernameVariable: 'dockerHubUser'
                )]) {
                    sh 'docker login -u ${dockerHubUser} -p ${dockerpass}'
                    sh 'docker tag node-app-batch-6:latest ${dockerHubUser}/node-app-batch-6:latest'
                    sh 'docker push ${dockerHubUser}/node-app-batch-6:latest'
                }
            }
        }
        stage("Deploy") {
            steps {
                sh 'docker-compose down && docker-compose up -d --build'
            }
        }
    }
}
